// <auto-generated />
using System;
using HogeBlazor.Server.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HogeBlazor.Server.Db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HogeBlazor.Shared.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrakeFront")
                        .HasColumnType("text")
                        .HasComment("ブレーキ形式前");

                    b.Property<string>("BrakeRear")
                        .HasColumnType("text")
                        .HasComment("ブレーキ形式後");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("作成日時");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("削除日時");

                    b.Property<int?>("DriveSystem")
                        .HasColumnType("integer")
                        .HasComment("駆動方式(FF/FR/RR/MR/AWD)");

                    b.Property<string[]>("FuelEfficiency")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasComment("燃費向上対策");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("グレード");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasComment("イメージURL");

                    b.Property<string>("MakerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("メーカー名");

                    b.Property<string>("ModelChangeFull")
                        .HasColumnType("text")
                        .HasComment("フルモデルチェンジ時期(日本)[yyyy-mm-dd]");

                    b.Property<string>("ModelChangeLast")
                        .HasColumnType("text")
                        .HasComment("最終モデルチェンジ時期(日本)[yyyy-mm-dd]");

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("型式");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("モデル名");

                    b.Property<int?>("PowerTrain")
                        .HasColumnType("integer")
                        .HasComment("パワートレイン(ICE/StrHV/MldHV/SerHV/PHEV/BEV/RexEV/FCEV)");

                    b.Property<int?>("Price")
                        .HasColumnType("integer")
                        .HasComment("小売価格(税込/円)");

                    b.Property<string>("Steering")
                        .HasColumnType("text")
                        .HasComment("ステアリング形式");

                    b.Property<string>("SuspensionFront")
                        .HasColumnType("text")
                        .HasComment("サスペンション形式前");

                    b.Property<string>("SuspensionRear")
                        .HasColumnType("text")
                        .HasComment("サスペンション形式後");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()")
                        .HasComment("更新日時");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasComment("URL");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrakeFront = "ベンチレーテッドディスク",
                            BrakeRear = "ディスク",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriveSystem = 4,
                            FuelEfficiency = new[] { "ミラーサイクルエンジン", "アイドリングストップ機構", "筒内直接噴射", "可変バルブタイミング", "気筒休止", "充電制御", "ロックアップ機構付トルクコンバーター", "電動パワーステアリング" },
                            GradeName = "25S Proactive",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/8/85/2017_Mazda_CX-5_%28KF%29_Maxx_2WD_wagon_%282018-11-02%29_01.jpg",
                            MakerName = "マツダ",
                            ModelChangeFull = "2016-12-15",
                            ModelChangeLast = "2018-01-01",
                            ModelCode = "6BA-KF5P",
                            ModelName = "CX-5",
                            PowerTrain = 0,
                            Price = 3140500,
                            Steering = "ラック&ピニオン式",
                            SuspensionFront = "マクファーソンストラット式",
                            SuspensionRear = "マルチリンク式",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www.mazda.co.jp/cars/cx-5/"
                        },
                        new
                        {
                            Id = 2,
                            BrakeFront = "ベンチレーテッドディスク",
                            BrakeRear = "ディスク",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriveSystem = 4,
                            FuelEfficiency = new[] { "ハイブリッドシステム", "アイドリングストップ装置", "可変バルブタイミング", "電動パワーステアリング", "充電制御", "電気式無段変速機" },
                            GradeName = "HYBRID G-X E-Four",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/8/8a/Toyota_COROLLA_TOURING_HYBRID_W%C3%97B_2WD_%286AA-ZWE211W-AWXSB%29_front.jpg",
                            MakerName = "トヨタ",
                            ModelChangeFull = "2019-09-17",
                            ModelChangeLast = "2021-11-15",
                            ModelCode = "6AA-ZWE214W-AWXNB",
                            ModelName = "カローラツーリング",
                            PowerTrain = 1,
                            Price = 2678500,
                            SuspensionFront = "マクファーソンストラット式コイルスプリング",
                            SuspensionRear = "ダブルウィッシュボーン式コイルスプリング",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://toyota.jp/corollatouring/"
                        },
                        new
                        {
                            Id = 3,
                            BrakeFront = "油圧式ベンチレーテッドディスク",
                            BrakeRear = "油圧式ベンチレーテッドディスク",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriveSystem = 4,
                            FuelEfficiency = new[] { "ハイブリッドシステム", "直噴エンジン", "可変バルブタイミング", "アイドリングストップ装置", "電動パワーステアリング" },
                            GradeName = "Type S",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/e/ea/2019_Honda_NSX_3.5_CAA-NC1_%2820190722%29_01.jpg",
                            MakerName = "ホンダ",
                            ModelChangeFull = "2017-02-27",
                            ModelChangeLast = "2021-08-30",
                            ModelCode = "5AA-NC1",
                            ModelName = "NSX",
                            PowerTrain = 2,
                            Price = 27940000,
                            Steering = "ラック&ピニオン式(電動パワーステアリング仕様)",
                            SuspensionFront = "ダブルウィッシュボーン式",
                            SuspensionRear = "ウィッシュボーン式",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www.honda.co.jp/NSX/types/"
                        },
                        new
                        {
                            Id = 4,
                            BrakeFront = "油圧式ベンチレーテッドディスク",
                            BrakeRear = "油圧式ディスク",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriveSystem = 2,
                            FuelEfficiency = new[] { "電動パワーステアリング" },
                            GradeName = "Honda e Advance",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/9/9e/Honda_e_Advance_%28ZAA-ZC7%29_front.jpg",
                            MakerName = "ホンダ",
                            ModelChangeFull = "2020-08-27",
                            ModelChangeLast = "2020-08-27",
                            ModelCode = "ZAA-ZC7",
                            ModelName = "Honda e",
                            PowerTrain = 5,
                            Price = 4950000,
                            Steering = "ラック&ピニオン式",
                            SuspensionFront = "マクファーソン式",
                            SuspensionRear = "マクファーソン式",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www.honda.co.jp/honda-e/"
                        },
                        new
                        {
                            Id = 5,
                            BrakeFront = "ベンチレーテッドディスク式",
                            BrakeRear = "リーディングトレーリング式",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriveSystem = 4,
                            FuelEfficiency = new[] { "ハイブリッドシステム", "アイドリングストップ装置", "可変バルブタイミング", "ミラーサイクル", "電動パワーステアリング" },
                            GradeName = "X FOUR",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/0/0a/Nissan_Note_e-POWER_%28E13%29%2C_2021%2C_front-left.jpg",
                            MakerName = "日産",
                            ModelChangeFull = "2020-11-24",
                            ModelChangeLast = "2021-11-04",
                            ModelCode = "6AA-SNE13",
                            ModelName = "ノート",
                            PowerTrain = 3,
                            Price = 2445300,
                            Steering = "ラック&ピニオン式",
                            SuspensionFront = "独立懸架ストラット式",
                            SuspensionRear = "トーションビーム式",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www3.nissan.co.jp/vehicles/new/note.html"
                        },
                        new
                        {
                            Id = 6,
                            BrakeFront = "ベンチレーテッドディスク",
                            BrakeRear = "ベンチレーテッドディスク",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriveSystem = 4,
                            FuelEfficiency = new[] { "筒内直接噴射", "電子制御式燃料噴射", "高圧噴射(コモンレール・ダイレクト・インジェクション・システム)", "過給機(可変ジオメトリー・ターボチャージャー)", "充電制御(ブレーキ・エネルギー回生システム)", "アイドリング・ストップ装置(エンジン・オート・スタート/ストップ)", "電動パワーステアリング" },
                            GradeName = "320d xDriveツーリング Standard",
                            MakerName = "BMW",
                            ModelChangeFull = "2019-09-26",
                            ModelChangeLast = "2019-09-26",
                            ModelCode = "3DA-6L20",
                            ModelName = "3シリーズツーリング",
                            PowerTrain = 0,
                            Price = 6340000,
                            Steering = "ラック&ピニオン式、単速感応式パワー・ステアリング",
                            SuspensionFront = "ダブル・ジョイント・スプリング・ストラット式、コイルスプリング",
                            SuspensionRear = "5リンク式、コイル・スプリング",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Url = "https://www.bmw.co.jp/ja/all-models/3-series/touring/2019/bmw-3-series-touring-inspire.html"
                        });
                });

            modelBuilder.Entity("HogeBlazor.Shared.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Supplier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0102f709-1dd7-40de-af3d-23598c6bbd1f"),
                            ImageUrl = "https://ih1.redbubble.net/image.1062161969.4889/mug,travel,x1000,center-pad,1000x1000,f8f8f8.u2.jpg",
                            Name = "Travel Mug",
                            Price = 11.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("ac7de2dc-049c-4328-ab06-6cde3ebe8aa7"),
                            ImageUrl = "https://ih1.redbubble.net/image.1063377597.4889/ur,mug_lifestyle,square,1000x1000.u2.jpg",
                            Name = "Classic Mug",
                            Price = 22.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("d26384cb-64b9-4aca-acb0-4ebb8fc53ba2"),
                            ImageUrl = "https://ih1.redbubble.net/image.1063364659.4889/ra,vneck,x1900,101010:01c5ca27c6,front-c,160,70,1000,1000-bg,f8f8f8.u2.jpg",
                            Name = "Code Maze Logo T-Shirt",
                            Price = 20.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("b47d4c3c-3e29-49b9-b6be-28e5ee4625be"),
                            ImageUrl = "https://ih1.redbubble.net/image.1063364659.4889/ssrco,mhoodie,mens,101010:01c5ca27c6,front,square_three_quarter,x1000-bg,f8f8f8.1u2.jpg",
                            Name = "Pullover Hoodie",
                            Price = 30.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("54b2f952-b63e-4cad-8b38-c09955fe4c62"),
                            ImageUrl = "https://ih1.redbubble.net/image.1063364659.4889/ssrco,mhoodiez,mens,101010:01c5ca27c6,front,square_three_quarter,1000x1000-bg,f8f8f8.u2.jpg",
                            Name = "Fitted Scoop T-Shirt",
                            Price = 40.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("83e0aa87-158f-4e5f-a8f7-e5a98d13e3a5"),
                            ImageUrl = "https://ih1.redbubble.net/image.1063364659.4889/ra,fitted_scoop,x2000,101010:01c5ca27c6,front-c,160,143,1000,1000-bg,f8f8f8.u2.jpg",
                            Name = "Zipped Hoodie",
                            Price = 55.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("488aaa0e-aa7e-4820-b4e9-5715f0e5186e"),
                            ImageUrl = "https://ih1.redbubble.net/image.1062161956.4889/icr,iphone_11_soft,back,a,x1000-pad,1000x1000,f8f8f8.u2.jpg",
                            Name = "iPhone Case & Cover",
                            Price = 25.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("4e693871-788d-4db4-89e5-dd7678db975e"),
                            ImageUrl = "https://ih1.redbubble.net/image.1062161956.4889/icr,samsung_galaxy_s10_snap,back,a,x1000-pad,1000x1000,f8f8f8.1u2.jpg",
                            Name = "Case & Skin for Samsung Galaxy",
                            Price = 35.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("2d3c2abe-85ec-4d1e-9fef-9b4bfea5f459"),
                            ImageUrl = "https://ih1.redbubble.net/image.1063329780.4889/mwo,x1000,ipad_2_snap-pad,1000x1000,f8f8f8.u2.jpg",
                            Name = "iPad Case & Skin",
                            Price = 45.0,
                            Supplier = "Code Maze"
                        },
                        new
                        {
                            Id = new Guid("d1f22836-6342-480a-be2f-035eeb010fd0"),
                            ImageUrl = "https://ih1.redbubble.net/image.1062161997.4889/clkc,bamboo,white,1000x1000-bg,f8f8f8.u2.jpg",
                            Name = "Wall Clock",
                            Price = 25.0,
                            Supplier = "Code Maze"
                        });
                });

            modelBuilder.Entity("HogeBlazor.Shared.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HogeBlazor.Shared.Models.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<LocalDate>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("integer");

                    b.Property<LocalTime>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new NodaTime.LocalDate(2022, 5, 18),
                            Summary = "雨",
                            TemperatureC = 15,
                            Time = new NodaTime.LocalTime(12, 34, 56)
                        },
                        new
                        {
                            Id = 2,
                            Date = new NodaTime.LocalDate(2022, 5, 18),
                            Summary = "晴れのち曇",
                            TemperatureC = 18,
                            Time = new NodaTime.LocalTime(12, 34, 56)
                        },
                        new
                        {
                            Id = 3,
                            Date = new NodaTime.LocalDate(2022, 5, 18),
                            Summary = "晴",
                            TemperatureC = 22,
                            Time = new NodaTime.LocalTime(12, 34, 56)
                        },
                        new
                        {
                            Id = 4,
                            Date = new NodaTime.LocalDate(2022, 5, 18),
                            Summary = "台風",
                            TemperatureC = 26,
                            Time = new NodaTime.LocalTime(12, 34, 56)
                        },
                        new
                        {
                            Id = 5,
                            Date = new NodaTime.LocalDate(2022, 5, 18),
                            Summary = "曇",
                            TemperatureC = 21,
                            Time = new NodaTime.LocalTime(12, 34, 56)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d971df93-6b6e-4623-bca5-d89ed44b5207",
                            ConcurrencyStamp = "4b4268c7-9744-408b-b040-c641df12485a",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        },
                        new
                        {
                            Id = "c3af2775-4f6b-47e0-808b-72350b46fa5a",
                            ConcurrencyStamp = "de330a13-24a4-4187-a175-f25790c434b5",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HogeBlazor.Shared.Models.Car", b =>
                {
                    b.OwnsOne("HogeBlazor.Shared.Models.Battery", "Battery", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<float?>("Capacity")
                                .HasColumnType("real")
                                .HasComment("バッテリー容量(Ah)");

                            b1.Property<int?>("Quantity")
                                .HasColumnType("integer")
                                .HasComment("バッテリー個数");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasComment("バッテリー種類");

                            b1.Property<float?>("Voltage")
                                .HasColumnType("real")
                                .HasComment("バッテリー電圧(V)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 2,
                                    Capacity = 6.5f,
                                    Type = "ニッケル水素電池"
                                },
                                new
                                {
                                    CarId = 3,
                                    Quantity = 72,
                                    Type = "ニッケル水素電池"
                                },
                                new
                                {
                                    CarId = 4,
                                    Capacity = 50f,
                                    Quantity = 193,
                                    Type = "リチウムイオン電池",
                                    Voltage = 3.7f
                                },
                                new
                                {
                                    CarId = 5,
                                    Type = "リチウムイオン電池"
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Body", "Body", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<int?>("DoorNum")
                                .HasColumnType("integer")
                                .HasComment("ドア数");

                            b1.Property<int?>("Height")
                                .HasColumnType("integer")
                                .HasComment("全高(mm)");

                            b1.Property<int?>("Length")
                                .HasColumnType("integer")
                                .HasComment("全長(mm)");

                            b1.Property<int?>("MinRoadClearance")
                                .HasColumnType("integer")
                                .HasComment("最低地上高(mm)");

                            b1.Property<int?>("TreadFront")
                                .HasColumnType("integer")
                                .HasComment("トレッド前(mm)");

                            b1.Property<int?>("TreadRear")
                                .HasColumnType("integer")
                                .HasComment("トレッド後(mm)");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer")
                                .HasComment("ボディタイプ");

                            b1.Property<int?>("Weight")
                                .HasColumnType("integer")
                                .HasComment("車両重量(kg)");

                            b1.Property<int?>("WheelBase")
                                .HasColumnType("integer")
                                .HasComment("ホイールベース(mm)");

                            b1.Property<int?>("Width")
                                .HasColumnType("integer")
                                .HasComment("全幅(mm)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 1,
                                    DoorNum = 4,
                                    Height = 1690,
                                    Length = 4545,
                                    MinRoadClearance = 210,
                                    TreadFront = 1595,
                                    TreadRear = 1595,
                                    Type = 8,
                                    Weight = 1620,
                                    WheelBase = 2700,
                                    Width = 1840
                                },
                                new
                                {
                                    CarId = 2,
                                    DoorNum = 4,
                                    Height = 1460,
                                    Length = 4495,
                                    MinRoadClearance = 130,
                                    TreadFront = 1530,
                                    TreadRear = 1540,
                                    Type = 7,
                                    Weight = 1410,
                                    WheelBase = 2640,
                                    Width = 1745
                                },
                                new
                                {
                                    CarId = 3,
                                    DoorNum = 2,
                                    Height = 1215,
                                    Length = 4535,
                                    MinRoadClearance = 110,
                                    TreadFront = 1665,
                                    TreadRear = 1635,
                                    Type = 6,
                                    Weight = 1790,
                                    WheelBase = 2630,
                                    Width = 1940
                                },
                                new
                                {
                                    CarId = 4,
                                    DoorNum = 4,
                                    Height = 1510,
                                    Length = 3895,
                                    MinRoadClearance = 145,
                                    TreadFront = 1510,
                                    TreadRear = 1505,
                                    Type = 1,
                                    Weight = 1540,
                                    WheelBase = 2530,
                                    Width = 1750
                                },
                                new
                                {
                                    CarId = 5,
                                    DoorNum = 4,
                                    Height = 1520,
                                    Length = 4045,
                                    MinRoadClearance = 125,
                                    TreadFront = 1490,
                                    TreadRear = 1490,
                                    Type = 1,
                                    Weight = 1340,
                                    WheelBase = 2580,
                                    Width = 1695
                                },
                                new
                                {
                                    CarId = 6,
                                    DoorNum = 4,
                                    Height = 1475,
                                    Length = 4715,
                                    MinRoadClearance = 135,
                                    TreadFront = 1575,
                                    TreadRear = 1590,
                                    Type = 7,
                                    Weight = 1730,
                                    WheelBase = 2850,
                                    Width = 1825
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Motor", "MotorX", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<string>("Code")
                                .HasColumnType("text")
                                .HasComment("電動機型式");

                            b1.Property<float?>("MaxOutput")
                                .HasColumnType("real")
                                .HasComment("最高出力(kW)");

                            b1.Property<int?>("MaxOutputLowerRpm")
                                .HasColumnType("integer")
                                .HasComment("最高出力回転数(低)(rpm)");

                            b1.Property<int?>("MaxOutputUpperRpm")
                                .HasColumnType("integer")
                                .HasComment("最高出力回転数(高)(rpm)");

                            b1.Property<float?>("MaxTorque")
                                .HasColumnType("real")
                                .HasComment("最大トルク(Nm)");

                            b1.Property<int?>("MaxTorqueLowerRpm")
                                .HasColumnType("integer")
                                .HasComment("最大トルク回転数(低)(rpm)");

                            b1.Property<int?>("MaxTorqueUpperRpm")
                                .HasColumnType("integer")
                                .HasComment("最大トルク回転数(高)(rpm)");

                            b1.Property<string>("Purpose")
                                .HasColumnType("text")
                                .HasComment("用途(動力前用/動力後用/発電用)");

                            b1.Property<float?>("RatedOutput")
                                .HasColumnType("real")
                                .HasComment("定格出力(kW)");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasComment("電動機種類");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 2,
                                    Code = "1NM",
                                    MaxOutput = 53f,
                                    MaxTorque = 163f,
                                    Purpose = "動力前用",
                                    Type = "交流同期電動機"
                                },
                                new
                                {
                                    CarId = 3,
                                    Code = "H3",
                                    MaxOutput = 27f,
                                    MaxOutputLowerRpm = 4000,
                                    MaxOutputUpperRpm = 4000,
                                    MaxTorque = 73f,
                                    MaxTorqueLowerRpm = 0,
                                    MaxTorqueUpperRpm = 2000,
                                    Purpose = "動力前用",
                                    Type = "交流同期電動機"
                                },
                                new
                                {
                                    CarId = 4,
                                    Code = "MCF5",
                                    MaxOutput = 113f,
                                    MaxOutputLowerRpm = 3497,
                                    MaxOutputUpperRpm = 10000,
                                    MaxTorque = 315f,
                                    MaxTorqueLowerRpm = 0,
                                    MaxTorqueUpperRpm = 2000,
                                    Purpose = "動力後用",
                                    RatedOutput = 60f,
                                    Type = "交流同期電動機"
                                },
                                new
                                {
                                    CarId = 5,
                                    Code = "EM47",
                                    MaxOutput = 85f,
                                    MaxOutputLowerRpm = 2900,
                                    MaxOutputUpperRpm = 10341,
                                    MaxTorque = 280f,
                                    MaxTorqueLowerRpm = 0,
                                    MaxTorqueUpperRpm = 2900,
                                    Purpose = "発電用",
                                    Type = "交流同期電動機"
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Motor", "MotorY", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<string>("Code")
                                .HasColumnType("text")
                                .HasComment("電動機型式");

                            b1.Property<float?>("MaxOutput")
                                .HasColumnType("real")
                                .HasComment("最高出力(kW)");

                            b1.Property<int?>("MaxOutputLowerRpm")
                                .HasColumnType("integer")
                                .HasComment("最高出力回転数(低)(rpm)");

                            b1.Property<int?>("MaxOutputUpperRpm")
                                .HasColumnType("integer")
                                .HasComment("最高出力回転数(高)(rpm)");

                            b1.Property<float?>("MaxTorque")
                                .HasColumnType("real")
                                .HasComment("最大トルク(Nm)");

                            b1.Property<int?>("MaxTorqueLowerRpm")
                                .HasColumnType("integer")
                                .HasComment("最大トルク回転数(低)(rpm)");

                            b1.Property<int?>("MaxTorqueUpperRpm")
                                .HasColumnType("integer")
                                .HasComment("最大トルク回転数(高)(rpm)");

                            b1.Property<string>("Purpose")
                                .HasColumnType("text")
                                .HasComment("用途(動力前用/動力後用/発電用)");

                            b1.Property<float?>("RatedOutput")
                                .HasColumnType("real")
                                .HasComment("定格出力(kW)");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasComment("電動機種類");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 2,
                                    Code = "1MM",
                                    MaxOutput = 5.3f,
                                    MaxTorque = 55f,
                                    Purpose = "動力後用",
                                    Type = "交流同期電動機"
                                },
                                new
                                {
                                    CarId = 3,
                                    Code = "H2",
                                    MaxOutput = 35f,
                                    MaxOutputLowerRpm = 3000,
                                    MaxOutputUpperRpm = 3000,
                                    MaxTorque = 148f,
                                    MaxTorqueLowerRpm = 500,
                                    MaxTorqueUpperRpm = 2000,
                                    Purpose = "動力後用",
                                    Type = "交流同期電動機"
                                },
                                new
                                {
                                    CarId = 5,
                                    Code = "MM48",
                                    MaxOutput = 50f,
                                    MaxOutputLowerRpm = 4775,
                                    MaxOutputUpperRpm = 10024,
                                    MaxTorque = 100f,
                                    MaxTorqueLowerRpm = 0,
                                    MaxTorqueUpperRpm = 4775,
                                    Purpose = "動力後用",
                                    Type = "交流同期電動機"
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Tire", "TireFront", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<int?>("AspectRatio")
                                .HasColumnType("integer")
                                .HasComment("扁平率(%)");

                            b1.Property<int?>("SectionWidth")
                                .HasColumnType("integer")
                                .HasComment("タイヤ幅(mm)");

                            b1.Property<int?>("WheelDiameter")
                                .HasColumnType("integer")
                                .HasComment("ホイール径(インチ)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 1,
                                    AspectRatio = 55,
                                    SectionWidth = 225,
                                    WheelDiameter = 19
                                },
                                new
                                {
                                    CarId = 2,
                                    AspectRatio = 65,
                                    SectionWidth = 195,
                                    WheelDiameter = 15
                                },
                                new
                                {
                                    CarId = 3,
                                    AspectRatio = 35,
                                    SectionWidth = 245,
                                    WheelDiameter = 19
                                },
                                new
                                {
                                    CarId = 4,
                                    AspectRatio = 45,
                                    SectionWidth = 205,
                                    WheelDiameter = 17
                                },
                                new
                                {
                                    CarId = 5,
                                    AspectRatio = 60,
                                    SectionWidth = 185,
                                    WheelDiameter = 16
                                },
                                new
                                {
                                    CarId = 6,
                                    AspectRatio = 50,
                                    SectionWidth = 225,
                                    WheelDiameter = 17
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Tire", "TireRear", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<int?>("AspectRatio")
                                .HasColumnType("integer")
                                .HasComment("扁平率(%)");

                            b1.Property<int?>("SectionWidth")
                                .HasColumnType("integer")
                                .HasComment("タイヤ幅(mm)");

                            b1.Property<int?>("WheelDiameter")
                                .HasColumnType("integer")
                                .HasComment("ホイール径(インチ)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 1,
                                    AspectRatio = 55,
                                    SectionWidth = 225,
                                    WheelDiameter = 19
                                },
                                new
                                {
                                    CarId = 2,
                                    AspectRatio = 65,
                                    SectionWidth = 195,
                                    WheelDiameter = 15
                                },
                                new
                                {
                                    CarId = 3,
                                    AspectRatio = 30,
                                    SectionWidth = 305,
                                    WheelDiameter = 20
                                },
                                new
                                {
                                    CarId = 4,
                                    AspectRatio = 45,
                                    SectionWidth = 225,
                                    WheelDiameter = 17
                                },
                                new
                                {
                                    CarId = 5,
                                    AspectRatio = 60,
                                    SectionWidth = 185,
                                    WheelDiameter = 16
                                },
                                new
                                {
                                    CarId = 6,
                                    AspectRatio = 50,
                                    SectionWidth = 225,
                                    WheelDiameter = 17
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Engine", "Engine", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<float?>("Bore")
                                .HasColumnType("real")
                                .HasComment("ボア(mm)");

                            b1.Property<string>("Code")
                                .HasColumnType("text")
                                .HasComment("エンジン型式");

                            b1.Property<float?>("CompressionRatio")
                                .HasColumnType("real")
                                .HasComment("圧縮比");

                            b1.Property<int?>("CylinderLayout")
                                .HasColumnType("integer")
                                .HasComment("シリンダーレイアウト(I/V/B/W)");

                            b1.Property<int?>("CylinderNum")
                                .HasColumnType("integer")
                                .HasComment("気筒数");

                            b1.Property<float?>("Displacement")
                                .HasColumnType("real")
                                .HasComment("総排気量(L)");

                            b1.Property<string>("FuelSystem")
                                .HasColumnType("text")
                                .HasComment("燃料供給装置");

                            b1.Property<int?>("FuelTankCap")
                                .HasColumnType("integer")
                                .HasComment("燃料タンク容量(L)");

                            b1.Property<int?>("FuelType")
                                .HasColumnType("integer")
                                .HasComment("使用燃料種類(軽油/無鉛レギュラーガソリン/無鉛プレミアムガソリン)");

                            b1.Property<float?>("MaxOutput")
                                .HasColumnType("real")
                                .HasComment("最高出力(kW)");

                            b1.Property<int?>("MaxOutputLowerRpm")
                                .HasColumnType("integer")
                                .HasComment("最高出力回転数(低)(rpm)");

                            b1.Property<int?>("MaxOutputUpperRpm")
                                .HasColumnType("integer")
                                .HasComment("最高出力回転数(高)(rpm)");

                            b1.Property<float?>("MaxTorque")
                                .HasColumnType("real")
                                .HasComment("最大トルク(Nm)");

                            b1.Property<int?>("MaxTorqueLowerRpm")
                                .HasColumnType("integer")
                                .HasComment("最大トルク回転数(低)(rpm)");

                            b1.Property<int?>("MaxTorqueUpperRpm")
                                .HasColumnType("integer")
                                .HasComment("最大トルク回転数(高)(rpm)");

                            b1.Property<float?>("Stroke")
                                .HasColumnType("real")
                                .HasComment("ストローク(mm)");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasComment("エンジン種類");

                            b1.Property<int?>("ValveSystem")
                                .HasColumnType("integer")
                                .HasComment("バルブ構造(SV/OHV/SOHC/DOHC)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 1,
                                    Bore = 89f,
                                    Code = "PY-RPS",
                                    CompressionRatio = 13f,
                                    CylinderLayout = 0,
                                    CylinderNum = 4,
                                    Displacement = 2.488f,
                                    FuelSystem = "DI",
                                    FuelTankCap = 58,
                                    FuelType = 1,
                                    MaxOutput = 138f,
                                    MaxOutputLowerRpm = 6000,
                                    MaxOutputUpperRpm = 6000,
                                    MaxTorque = 250f,
                                    MaxTorqueLowerRpm = 4000,
                                    MaxTorqueUpperRpm = 4000,
                                    Stroke = 100f,
                                    Type = "水冷直列4気筒DOHC16バルブ",
                                    ValveSystem = 3
                                },
                                new
                                {
                                    CarId = 2,
                                    Bore = 80.5f,
                                    Code = "2ZR-FXE",
                                    CylinderLayout = 0,
                                    CylinderNum = 4,
                                    Displacement = 1.797f,
                                    FuelSystem = "電子制御式燃料噴射装置(EFI)",
                                    FuelTankCap = 43,
                                    FuelType = 1,
                                    MaxOutput = 72f,
                                    MaxOutputLowerRpm = 5200,
                                    MaxOutputUpperRpm = 5200,
                                    MaxTorque = 142f,
                                    MaxTorqueLowerRpm = 3600,
                                    MaxTorqueUpperRpm = 3600,
                                    Stroke = 88.3f,
                                    Type = "直列4気筒 DOHC 16バルブ VVT-i ミラーサイクル",
                                    ValveSystem = 3
                                },
                                new
                                {
                                    CarId = 3,
                                    Bore = 91f,
                                    Code = "JNC",
                                    CompressionRatio = 10f,
                                    CylinderLayout = 1,
                                    CylinderNum = 6,
                                    Displacement = 3.492f,
                                    FuelSystem = "電子制御燃料噴射式(ホンダ PGM-FI)",
                                    FuelTankCap = 59,
                                    FuelType = 2,
                                    MaxOutput = 389f,
                                    MaxOutputLowerRpm = 6500,
                                    MaxOutputUpperRpm = 6850,
                                    MaxTorque = 600f,
                                    MaxTorqueLowerRpm = 2300,
                                    MaxTorqueUpperRpm = 6000,
                                    Stroke = 89.5f,
                                    Type = "水冷V型6気筒縦置",
                                    ValveSystem = 3
                                },
                                new
                                {
                                    CarId = 5,
                                    Bore = 78f,
                                    Code = "HR12DE",
                                    CompressionRatio = 12f,
                                    CylinderLayout = 0,
                                    CylinderNum = 3,
                                    Displacement = 1.198f,
                                    FuelSystem = "ニッサンEGI(ECCS)電子制御燃料噴射装置",
                                    FuelTankCap = 36,
                                    FuelType = 1,
                                    MaxOutput = 60f,
                                    MaxOutputLowerRpm = 6000,
                                    MaxOutputUpperRpm = 6000,
                                    MaxTorque = 103f,
                                    MaxTorqueLowerRpm = 4800,
                                    MaxTorqueUpperRpm = 4800,
                                    Stroke = 83.6f,
                                    Type = "DOHC水冷直列3気筒",
                                    ValveSystem = 3
                                },
                                new
                                {
                                    CarId = 6,
                                    Code = "B47D20B",
                                    CylinderLayout = 0,
                                    CylinderNum = 4,
                                    Displacement = 1.995f,
                                    FuelSystem = "デジタル・ディーゼル・エレクトロニクス(DDE/電子燃料噴射装置)",
                                    FuelTankCap = 59,
                                    FuelType = 0,
                                    MaxOutput = 140f,
                                    MaxOutputLowerRpm = 4000,
                                    MaxOutputUpperRpm = 4000,
                                    MaxTorque = 400f,
                                    MaxTorqueLowerRpm = 1750,
                                    MaxTorqueUpperRpm = 2500,
                                    Type = "直列4気筒DOHCディーゼル",
                                    ValveSystem = 3
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Interior", "Interior", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<int?>("Height")
                                .HasColumnType("integer")
                                .HasComment("室内高(mm)");

                            b1.Property<int?>("Length")
                                .HasColumnType("integer")
                                .HasComment("室内長(mm)");

                            b1.Property<int?>("LuggageCap")
                                .HasColumnType("integer")
                                .HasComment("ラゲッジルーム容量(L)");

                            b1.Property<int?>("RidingCap")
                                .HasColumnType("integer")
                                .HasComment("乗車定員(人)");

                            b1.Property<int?>("Width")
                                .HasColumnType("integer")
                                .HasComment("室内幅(mm)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 1,
                                    Height = 1265,
                                    Length = 1890,
                                    RidingCap = 5,
                                    Width = 1540
                                },
                                new
                                {
                                    CarId = 2,
                                    Height = 1160,
                                    Length = 1790,
                                    RidingCap = 5,
                                    Width = 1510
                                },
                                new
                                {
                                    CarId = 3,
                                    RidingCap = 2
                                },
                                new
                                {
                                    CarId = 4,
                                    Height = 1120,
                                    Length = 1845,
                                    RidingCap = 4,
                                    Width = 1385
                                },
                                new
                                {
                                    CarId = 5,
                                    Height = 1240,
                                    Length = 2030,
                                    RidingCap = 5,
                                    Width = 1445
                                },
                                new
                                {
                                    CarId = 6,
                                    LuggageCap = 500,
                                    RidingCap = 5
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Performance", "Performance", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<float?>("EcrJc08")
                                .HasColumnType("real")
                                .HasComment("交流電力消費率JC08モード(Wh/km)");

                            b1.Property<float?>("EcrWltc")
                                .HasColumnType("real")
                                .HasComment("交流電力消費率WTLCモード(Wh/km)");

                            b1.Property<float?>("EcrWltcExh")
                                .HasColumnType("real")
                                .HasComment("交流電力消費率WLTC高高速道路モード(Wh/km)");

                            b1.Property<float?>("EcrWltcH")
                                .HasColumnType("real")
                                .HasComment("交流電力消費率WLTC高速道路モード(Wh/km)");

                            b1.Property<float?>("EcrWltcL")
                                .HasColumnType("real")
                                .HasComment("交流電力消費率WLTC市街地モード(Wh/km)");

                            b1.Property<float?>("EcrWltcM")
                                .HasColumnType("real")
                                .HasComment("交流電力消費率WLTC郊外モード(Wh/km)");

                            b1.Property<float?>("FcrJc08")
                                .HasColumnType("real")
                                .HasComment("燃料消費率JC08モード(km/L)");

                            b1.Property<float?>("FcrWltc")
                                .HasColumnType("real")
                                .HasComment("燃料消費率WLTCモード(km/L)");

                            b1.Property<float?>("FcrWltcExh")
                                .HasColumnType("real")
                                .HasComment("燃料消費率WLTC高高速道路モード(km/L)");

                            b1.Property<float?>("FcrWltcH")
                                .HasColumnType("real")
                                .HasComment("燃料消費率WLTC高速道路モード(km/L)");

                            b1.Property<float?>("FcrWltcL")
                                .HasColumnType("real")
                                .HasComment("燃料消費率WLTC市街地モード(km/L)");

                            b1.Property<float?>("FcrWltcM")
                                .HasColumnType("real")
                                .HasComment("燃料消費率WLTC郊外モード(km/L)");

                            b1.Property<float?>("MinTurningRadius")
                                .HasColumnType("real")
                                .HasComment("最小回転半径(m)");

                            b1.Property<float?>("MpcJc08")
                                .HasColumnType("real")
                                .HasComment("一充電走行距離JC08モード(km)");

                            b1.Property<float?>("MpcWltc")
                                .HasColumnType("real")
                                .HasComment("一充電走行距離WLTCモード(km)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 1,
                                    FcrJc08 = 14.2f,
                                    FcrWltc = 13f,
                                    FcrWltcH = 14.7f,
                                    FcrWltcL = 10.2f,
                                    FcrWltcM = 13.4f,
                                    MinTurningRadius = 5.5f
                                },
                                new
                                {
                                    CarId = 2,
                                    FcrJc08 = 31f,
                                    FcrWltc = 26.8f,
                                    FcrWltcH = 26.8f,
                                    FcrWltcL = 25.1f,
                                    FcrWltcM = 28.1f,
                                    MinTurningRadius = 5f
                                },
                                new
                                {
                                    CarId = 3,
                                    FcrWltc = 10.6f,
                                    FcrWltcH = 11.4f,
                                    FcrWltcL = 7.8f,
                                    FcrWltcM = 12.1f,
                                    MinTurningRadius = 5.9f
                                },
                                new
                                {
                                    CarId = 4,
                                    EcrJc08 = 135f,
                                    EcrWltc = 138f,
                                    EcrWltcH = 149f,
                                    EcrWltcL = 116f,
                                    EcrWltcM = 130f,
                                    MinTurningRadius = 4.3f,
                                    MpcJc08 = 274f,
                                    MpcWltc = 259f
                                },
                                new
                                {
                                    CarId = 5,
                                    FcrJc08 = 28.2f,
                                    FcrWltc = 23.8f,
                                    FcrWltcH = 22.9f,
                                    FcrWltcL = 23.1f,
                                    FcrWltcM = 25.8f,
                                    MinTurningRadius = 4.9f
                                },
                                new
                                {
                                    CarId = 6,
                                    FcrJc08 = 19.6f,
                                    FcrWltc = 15.6f,
                                    FcrWltcH = 18f,
                                    FcrWltcL = 12.6f,
                                    FcrWltcM = 14.9f,
                                    MinTurningRadius = 5.7f
                                });
                        });

                    b.OwnsOne("HogeBlazor.Shared.Models.Transmission", "Transmission", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("integer");

                            b1.Property<float?>("GearRatioRear")
                                .HasColumnType("real")
                                .HasComment("変速比後退");

                            b1.Property<float[]>("GearRatiosFront")
                                .HasColumnType("real[]")
                                .HasComment("変速比前進配列");

                            b1.Property<float?>("ReductionRatioFront")
                                .HasColumnType("real")
                                .HasComment("減速比フロント");

                            b1.Property<float?>("ReductionRatioRear")
                                .HasColumnType("real")
                                .HasComment("減速比リア");

                            b1.Property<int?>("Type")
                                .HasColumnType("integer")
                                .HasComment("種類(AT/DCT/AMT/MT/CVT)");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");

                            b1.HasData(
                                new
                                {
                                    CarId = 1,
                                    GearRatioRear = 3.893f,
                                    GearRatiosFront = new[] { 3.552f, 2.022f, 1.452f, 1f, 0.708f, 0.599f },
                                    ReductionRatioFront = 4.624f,
                                    ReductionRatioRear = 2.928f,
                                    Type = 0
                                },
                                new
                                {
                                    CarId = 2,
                                    ReductionRatioFront = 2.834f,
                                    ReductionRatioRear = 10.487f,
                                    Type = 5
                                },
                                new
                                {
                                    CarId = 3,
                                    GearRatiosFront = new[] { 3.838f, 2.433f, 1.777f, 1.427f, 1.211f, 1.038f, 0.88f, 0.747f, 0.633f },
                                    ReductionRatioFront = 10.382f,
                                    ReductionRatioRear = 3.583f,
                                    Type = 1
                                },
                                new
                                {
                                    CarId = 4,
                                    ReductionRatioFront = 9.545f
                                },
                                new
                                {
                                    CarId = 5,
                                    ReductionRatioFront = 7.388f,
                                    ReductionRatioRear = 7.282f
                                },
                                new
                                {
                                    CarId = 6,
                                    GearRatiosFront = new[] { 5.25f, 3.36f, 2.172f, 1.72f, 1.316f, 1f, 0.822f, 0.64f },
                                    ReductionRatioFront = 2.813f,
                                    Type = 0
                                });
                        });

                    b.Navigation("Battery")
                        .IsRequired();

                    b.Navigation("Body")
                        .IsRequired();

                    b.Navigation("Engine")
                        .IsRequired();

                    b.Navigation("Interior")
                        .IsRequired();

                    b.Navigation("MotorX")
                        .IsRequired();

                    b.Navigation("MotorY")
                        .IsRequired();

                    b.Navigation("Performance")
                        .IsRequired();

                    b.Navigation("TireFront")
                        .IsRequired();

                    b.Navigation("TireRear")
                        .IsRequired();

                    b.Navigation("Transmission")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HogeBlazor.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HogeBlazor.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HogeBlazor.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HogeBlazor.Shared.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
